{
  "documents1": "# Try Documents\n\n---\n\nDocuments are ways of storing information right inside your Space. Provide guidance or reference for your customers without leaving Flatfile.\n\n## Making this Space\n\nThis Space has been configured with multiple documents upon creation.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n          await api.documents.create(spaceId, {\n            title: \"About this Documents Demo\",\n            body: \"Document text here.\",\n          });\n          await api.documents.create(spaceId, {\n            title: \"Configure multiple Documents\",\n            body: \"Document text here.\",\n          });\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error) {\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job encountered an error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n```\n",
  "documents2": "# Configure multiple Documents\n\n---\n\nAs this example demonstrates, you many create as many Documents are you need.\n\n## Further documentation\n\nRead more about Documents [here](https://flatfile.com/docs/guides/documents).\n\n## Additional examples\n\n- [Dynamic Example](https://platform.flatfile.com/examples)\n- [Extractors Example](https://platform.flatfile.com/examples)\n- [Simple Example](https://platform.flatfile.com/examples)\n- [Theming Example](https://platform.flatfile.com/examples)\n",
  "dynamic": "# Try Dynamic Configuration\n\n---\n\nTo work with data in Flatfile, you'll first need to create and then configure a Space.\n\nYour business needs will determine how many Spaces you'll need, you'll likely need more than one.\n\nDynamic configurations make it easy to create new Spaces that are ready to go with your pre-configured specifications.\n\n## Making this Space\n\nThis very Space was configured Dynamically.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n          await api.workbooks.create({\n            spaceId,\n            environmentId,\n            name: \"All Data\",\n            sheets: [\n              ...\n            ],\n            actions: [\n              {\n                operation: \"submitAction\",\n                mode: \"foreground\",\n                label: \"Submit\",\n                type: \"string\",\n                primary: true,\n              },\n            ],\n          });\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error) {\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n  listener.filter(\n    { job: \"workbook:submitAction\" },\n    (configure: FlatfileListener) => {\n      configure.on(\n        \"job:ready\",\n        async ({ context: { jobId } }: FlatfileEvent) => {\n          try {\n            await api.jobs.ack(jobId, {\n              info: \"Starting Job.\",\n              progress: 10,\n            });\n\n          // Custom Code Here\n\n            await api.jobs.complete(jobId, {\n              outcome: {\n                message: \"Job completed.\",\n              },\n            });\n          } catch (error) {\n            await api.jobs.fail(jobId, {\n              outcome: {\n                message: \"Job encountered an error.\",\n              },\n            });\n          }\n        }\n      );\n    }\n  );\n}\n```\n\nNotice that there are two listener configurations here:\n\n- `space:configure`\n- `workbook:submitAction`\n\nThe `workbook:submitAction` has been configured to respond to the submit action on our Workbook. But the Workbook itself is configured dynamically via the `space:configure` listener.\n\n## Initializing your dynamic configuration\n\nWith the above code running on our Agent, we simply create a new space taking care to include the `autoConfigure: true` parameter. This parameter triggers the publication of the `space:configure` event that we're listening for. But you can do far more than adding a Workbook. See our other examples for further possibilities.\n\n## Further documentation\n\nRead more about dynamic configuration [here](https://flatfile.com/docs/guides/dynamic-configurations).\n\n## Additional examples\n\n- [Documents Example](https://platform.flatfile.com/examples)\n- [Extractors Example](https://platform.flatfile.com/examples)\n- [Simple Example](https://platform.flatfile.com/examples)\n- [Theming Example](https://platform.flatfile.com/examples)\n",
  "extractors": "# Try Extractors\n\n---\n\nThe Flatfile Platform is a powerful tool for working with your Data. But first, your data has to be available to work with. Making existing data available in Flatfile is simple: upload, extract, map.\n\nExtraction is the process of extracting data from its original format to the Flatfile Platform. Whether your incoming data is `.json`, `.xlsx`, `.zip`, or a multitude of others extraction can be automated via the use of Plugins. Simply configure your Listener to use one or more extractor plugins and extraction will be handled automatically upon file upload.\n\n## Making this Space\n\nThis Space has been configured to use several extractor plugins.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport { Client, FlatfileListener } from \"@flatfile/listener\";\n\nimport { DelimiterExtractor } from \"@flatfile/plugin-delimiter-extractor\";\nimport { JSONExtractor } from \"@flatfile/plugin-json-extractor\";\nimport { ExcelExtractor } from \"@flatfile/plugin-xlsx-extractor\";\nimport { XMLExtractor } from \"@flatfile/plugin-xml-extractor\";\nimport { ZipExtractor } from \"@flatfile/plugin-zip-extractor\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.use(JSONExtractor());\n  listener.use(ExcelExtractor());\n  listener.use(XMLExtractor());\n  listener.use(DelimiterExtractor(\"txt\", { delimiter: \"~\" }));\n  listener.use(ZipExtractor());\n}\n```\n\nTo see these work, simply upload a supported file.\n\nThe appropriate plugin will extract data automatically. Once extraction is complete, you can import and map your data into a workbook and it's ready for use.\n\n## Further documentation\n\nRead more about the possible configurations for each plugin [here](https://flatfile.com/docs/plugins/extractors/).\n\n## Additional examples\n\n- [Documents Example](https://platform.flatfile.com/examples)\n- [Dynamic Example](https://platform.flatfile.com/examples)\n- [Simple Example](https://platform.flatfile.com/examples)\n- [Theming Example](https://platform.flatfile.com/examples)\n",
  "simple": "# Try Flatfile\n\n---\n\nWelcome, to Flatfile.\n\nThis is Basic Space, configured as an interactive tour to show you around.\n\nLet's begin by first getting acquainted with what you're seeing here in the sidebar.\n\n## Data Checklist\n\nUse the Data Checklist to learn the data that will be expected in the Simple Workbook.\n\n## Files\n\nUse the Files screen to upload files. You can also upload them directly into Sheets.\n\n## Collaborators\n\nInvite a Guest to this Space. Their view will look a little different than yours. Try an alias email to see.\n\n## Simple Workbook\n\nThe Simple Workbook contains two Sheets: **Contacts**, and **Countries**.\n\n#### Things you can do here:\n\n1. You can upload/download CSV files into and from each Sheet.\n2. You can manually add records to each Sheet directly in the UI.\n3. You can also manually adjust cells & records individually, or in bulk.\n\n#### 1. Contacts (Sheet)\n\nThe **Contacts** Sheet is a very simple Sheet with one reference field, **Country**. It also has a few data validations.\n\n#### 2. Countries (Sheet)\n\nThe **Countries** Sheet is where youâ€™ll add all of the countries you want to display in the dropdown menu in the first Sheet.\n\n## Additional examples\n\n- [Documents Example](https://platform.flatfile.com/examples)\n- [Dynamic Example](https://platform.flatfile.com/examples)\n- [Extractors Example](https://platform.flatfile.com/examples)\n- [Theming Example](https://platform.flatfile.com/examples)\n",
  "theming": "# Try Theming\n\n---\n\nAll Spaces are customizable via theming options enabling you to blend Flatfile seamlessly into your application.\n\n## Making this Space\n\nThis Space has been configured to leverage the visual overrides available to help you theme a Space. We've customized the colors and logo in this Space to match a sample brand but you can very easily update all of the elements you see to a different aesthetic to match yours. Even better? Create co-branded experiences in all of your Spaces for every one of your customers.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.on(\n    \"space:created\",\n    async ({ context: { spaceId, environmentId } }: FlatfileEvent) => {\n      await api.spaces.update(spaceId, {\n        environmentId,\n        metadata: {\n          theme: {\n            root: {\n              primaryColor: \"#090B2B\",\n              dangerColor: \"#F44336\",\n              warningColor: \"#FF9800\",\n            },\n            document: {\n              borderColor: \"#CAD0DC\",\n            },\n            sidebar: {\n              logo: \"path/to/logo/file\",\n              textColor: \"#ECEEFF\",\n              titleColor: \"#C4C9FF\",\n              focusBgColor: \"#6673FF\",\n              focusTextColor: \"#FFF\",\n              backgroundColor: \"#090B2B\",\n              footerTextColor: \"#C4C9FF\",\n              textUltralightColor: \"#B9DDFF\",\n              borderColor: \"#2E3168\",\n              activeTextColor: \"#FFF\",\n            },\n            table: {},\n          },\n          sidebarConfig: {\n            showGuestInvite: true,\n            showDataChecklist: true,\n            showSidebar: true,\n          },\n        },\n      });\n    }\n  );\n}\n```\n\n## Further documentation\n\nRead more about the possible configurations for theming [here](https://flatfile.com/docs/guides/theming).\n\n## Additional examples\n\n- [Documents Example](https://platform.flatfile.com/examples)\n- [Dynamic Example](https://platform.flatfile.com/examples)\n- [Extractors Example](https://platform.flatfile.com/examples)\n- [Theming Example](https://platform.flatfile.com/examples)\n"
}