{
  "actionsDocument": "# Trigger operations based on user input\n\n---\n\nAn Action is a code-based operation that executes upon user interaction.\n\nActions can be defined at the Blueprint level for a Workbook or Sheet. Files may also have actions, those are dynamically created by your listener upon file upload.\n\n## Making this Space\n\nThis Space has been configured with a workbook level action.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          await api.workbooks.create({\n              spaceId,\n              environmentId,\n                \"name\": \"All Contacts\",\n                \"sheets\": ...\n                \"actions\": [\n                    {\n                    \"operation\": \"submitAction\",\n                    \"mode\": \"foreground\",\n                    \"label\": \"Submit\",\n                    \"type\": \"string\",\n                    \"description\": \"Submit Data\",\n                    \"primary\": true\n                    }\n                ]\n          });\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n\n  listener.filter({ job: \"workbook:submitAction\" }, (configure) => {\n    configure.on(\"job:ready\", async (event: FlatfileEvent) => {\n      const { jobId } = event.context;\n      try {\n        await api.jobs.ack(jobId, {\n          info: \"Job started.\",\n          progress: 10,\n        });\n\n        // Custom code here\n\n        await api.jobs.complete(jobId, {\n          outcome: {\n            message: `Job \"Custom Action\" completed.`,\n          },\n        });\n      } catch (error: any) {\n        console.error(\"Error:\", error.stack);\n\n        await api.jobs.fail(jobId, {\n          outcome: {\n            message: \"Job encountered an error.\",\n          },\n        });\n      }\n    });\n  });\n}\n```\n\n## Things you can do here\n\nNotice the `submitAction` operation defined on the Workbook. This action is listened for and responded to below in the `workbook:submitAction` listener.\n\nTo see this Action run navigate to the Contacts Workbook and click `Submit`.\n\n## Further documentation\n\nRead more about how to configure actions based on user input [here](https://flatfile.com/docs/guides/actions).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "dataDocument": "# Process data with Data Hooks\n\n---\n\nData HooksÂ® are compact functions that automatically restructure, rectify, validate, and enhance data your data.\n\nThese hooks can operate on an entire record, or row, of data through methods on the FlatfileRecord class. Hooks at the record level can utilize all row fields, making them suitable for tasks needing multiple field access or new field creation.\n\n## Making this Space\n\nThis Space has been configured to use Data Hooks to compute and validate fields in the Contacts Sheet.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport { Client } from \"@flatfile/listener\";\nimport { recordHook, FlatfileRecord } from \"@flatfile/plugin-record-hook\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.use(\n    recordHook(\"contacts\", (record: FlatfileRecord) => {\n      record.compute(\n        \"email\",\n        (email, record) =>\n          `${record.get(\"first_name\")}${record.get(\"last_name\")}@gmail.com`,\n        \"Email was generated from first and last name.\"\n      );\n\n      record.computeIfPresent(\n        \"email\",\n        (email) => email?.toString() || \"\".toLowerCase(),\n        \"Email was converted to lowercase.\"\n      );\n\n      record.validate(\n        \"last_name\",\n        (value) => typeof value === \"string\" && !/\\d/.test(value),\n        \"Last name cannot contain numbers.\"\n      );\n      return record;\n    })\n  );\n}\n```\n\n## Things you can do here\n\n1. Enter and first and last name, and watch the email field populate. Notice it is lower case.\n2. Enter a last name with a number and see the field get marked as invalid.\n\n## Further documentation\n\nRead more about how to process data with data hooks [here](https://flatfile.com/docs/guides/handling-data).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "documentsDocument1": "# Build pages in your sidebar with Documents\n\n---\n\nDocuments are ways of storing information right inside your Space. Provide guidance or reference for your customers without leaving Flatfile.\n\n## Making this Space\n\nThis Space has been configured with multiple documents upon creation.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          // Acknowledge the space:configure job:ready event was received\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          // Add first document\n          await api.documents.create(spaceId, {\n            title: \"About this Documents Demo\",\n            body: \"Document text here.\",\n          });\n\n          // Add another document\n          await api.documents.create(spaceId, {\n            title: \"Configure multiple Documents\",\n            body: \"Document text here.\",\n          });\n\n          // Notify the space:configure job has been completed\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error) {\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job encountered an error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n```\n",
  "documentsDocument2": "# Configure multiple Documents\n\n---\n\nAs this example demonstrates, you many create as many Documents are you need.\n\n## Further documentation\n\nRead more about building pages in your sidebar [here](https://flatfile.com/docs/guides/documents).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "dynamicDocument": "# Dynamically build your Spaces as they're created\n\n---\n\nTo work with data in Flatfile, you'll first need to create and then configure a Space.\n\nYour business needs will determine how many Spaces you'll need, but you'll likely need more than one.\n\nDynamic configurations make it easy to create new Spaces that are ready to go with your pre-configured specifications.\\\nYou can even use the context of their creation to configure Spaces differently.\n\n## Making this Space\n\nThis very Space was configured Dynamically.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          // Acknowledge the space:configure job:ready event was received\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          // Add a workbook to this space\n          await api.workbooks.create({\n            spaceId,\n            environmentId,\n            name: \"All Data\",\n            sheets: [\n              ...\n            ],\n            actions: [\n              {\n                operation: \"submitAction\",\n                mode: \"foreground\",\n                label: \"Submit\",\n                type: \"string\",\n                primary: true,\n              },\n            ],\n          });\n\n          // Notify the space:configure job has been completed\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error) {\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n\n  listener.filter(\n    { job: \"workbook:submitAction\" },\n    (configure: FlatfileListener) => {\n      configure.on(\n        \"job:ready\",\n        async ({ context: { jobId } }: FlatfileEvent) => {\n          try {\n            await api.jobs.ack(jobId, {\n              info: \"Starting Job.\",\n              progress: 10,\n            });\n\n            // Custom code here\n\n            await api.jobs.complete(jobId, {\n              outcome: {\n                message: \"Job completed.\",\n              },\n            });\n          } catch (error) {\n            await api.jobs.fail(jobId, {\n              outcome: {\n                message: \"Job encountered an error.\",\n              },\n            });\n          }\n        }\n      );\n    }\n  );\n}\n```\n\nNotice that there are two listener configurations here:\n\n- `space:configure`\n- `workbook:submitAction`\n\nThe `workbook:submitAction` has been configured to respond to the submit action on our Workbook. But the Workbook itself is configured dynamically via the `space:configure` listener.\n\n## Initializing your dynamic configuration\n\nWith the above code running on our Agent, we simply create a new space taking care to include the `autoConfigure: true` parameter. This parameter triggers the publication of the `space:configure` event that we're listening for. But you can do far more than adding a Workbook. See our other examples for further possibilities.\n\n## Further documentation\n\nRead more about dynamically building your Spaces [here](https://flatfile.com/docs/guides/dynamic-configurations).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "egressDocument": "# Get your data out of Flatfile\n\n---\n\nOnce your data has been imported, transformed, and validated you'll likely want to export that data to a destination.\n\nSending your data is easy and infinitely customizable via the Flatfile Platform.\n\n## Making this Space\n\nThis Space has been configured to run custom Egress code on Submit.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\nimport simpleWorkbook from \"../constants/workbook.json\";\nimport { egressDocument } from \"../constants/documents.json\";\n\nexport default function flatfileEventListener(listener: Client) {\n   listener.filter({ job: \"workbook:submitAction\" }, (configure) => {\n    configure.on(\"job:ready\", async (event: FlatfileEvent) => {\n      const { jobId } = event.context;\n      try {\n        await api.jobs.ack(jobId, {\n          info: \"Job started.\",\n          progress: 10,\n        });\n\n        const { data } = await api.sheets.list({ workbookId });\n\n        const records = await Promise.all(data.map(async (element, index) => {\n            const record = await api.records.get(element.id);\n            return { [`Sheet[${index}]`]: record };\n        }));\n\n        // Custom code exporting records here\n\n        await api.jobs.complete(jobId, {\n          outcome: {\n            message: `Job \"Send Workbook To ACME\" completed.`,\n          },\n        });\n      } catch (error: any) {\n        console.error(\"Error:\", error.stack);\n\n        await api.jobs.fail(jobId, {\n          outcome: {\n            message: \"Job encountered an error.\",\n          },\n        });\n      }\n    });\n  });\n}\n\n```\n\nAs you can see this script monitors for a job event called `workbook:submitAction`. When this event is triggered, it retrieves the relevant Sheets and their associated Records from the Workbook.\n\nAfter that, you can send the data wherever you like.\n\n## Things you can do here\n\nNavigate to your Workbook and click Submit to see how easy it would be to Egress your Workbook.\n\n## Further documentation\n\nRead more about getting your data out of Flatfile [here](https://flatfile.com/docs/guides/egress).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "extractorDocument": "# Extract your data no matter the source\n\n---\n\nThe Flatfile Platform is a powerful tool for working with your data. But first, your data has to be available to work with.\n\nMaking existing data available in Flatfile is simple: upload, extract, map.\n\nExtraction is the process of unpacking data from its original format to the Flatfile Platform. Whether your incoming data is `.json`, `.xlsx`, `.zip`, or a multitude of others extraction can be automated via the use of Plugins. Simply configure your Listener to use one or more extractor plugins and extraction will be handled automatically upon file upload.\n\n## Making this Space\n\nThis Space has been configured to use several extractor plugins.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport { Client, FlatfileListener } from \"@flatfile/listener\";\n\nimport { JSONExtractor } from \"@flatfile/plugin-json-extractor\";\nimport { ExcelExtractor } from \"@flatfile/plugin-xlsx-extractor\";\nimport { XMLExtractor } from \"@flatfile/plugin-xml-extractor\";\nimport { ZipExtractor } from \"@flatfile/plugin-zip-extractor\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.use(JSONExtractor());\n  listener.use(ExcelExtractor());\n  listener.use(XMLExtractor());\n  listener.use(ZipExtractor());\n}\n```\n\n## Things you can do here\n\nTo see these work, simply upload a supported file under the \"Files\" tab.\n\n- [XLSX Data](https://github.com/FlatFilers/demo-agent/tree/main/src/files/movies.xlsx)\n- [JSON Data](https://github.com/FlatFilers/demo-agent/tree/main/src/files/movies.json)\n\nThe appropriate plugin will extract data automatically. Once extraction is complete, you can import and map your data into a workbook and it's ready for use.\n\n## Further documentation\n\nRead more about extractor plugins [here](https://flatfile.com/docs/plugins/extractors/).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "headlessDocument": "# Deliver a completely automated data import experience\n\n---\n\nWith Flatfileâs headless data import capabilities, you can seamlessly integrate an adaptable data connection into your system.\n\nYou can achieve a fully automated data exchange between systems in just three steps: `ingress`, `processing`, `egress`.\n\n## Making this Space\n\nThis Space has been configured to run as a Headless workflow.\n\nHere's a look at the code that was used to create it:\n\n```jsx\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          // Create a workbook when the space is configured\n          await api.workbooks.create({\n            spaceId,\n            environmentId,\n            ...\n          });\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n          console.error(\"Error: \", error.stack);\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n\n  // We expect Excel data, and use our plugin to extract it.\n  listener.use(ExcelExtractor({ rawNumbers: true }));\n  // Use automap to map the data into our Workbook\n  listener.use(\n    automap({\n      accuracy: \"confident\",\n      defaultTargetSheet: \"Inventory\",\n      matchFilename: /^.*inventory\\.xlsx$/,\n      onFailure: console.error,\n    })\n  );\n\n  // Use RecordHooks to transform and validate our data\n  listener.use(\n    recordHook(\"inventory\", async (record, event) => {\n      const author = record.get(\"author\");\n      function validateNameFormat(name: string) {\n        const pattern: RegExp = /^\\s*[\\p{L}'-]+\\s*,\\s*[\\p{L}'-]+\\s*$/u;\n        return pattern.test(name);\n      }\n\n      if (!validateNameFormat(author as string)) {\n        const nameSplit = (author as string).split(\" \");\n        record.set(\"author\", `${nameSplit[1]}, ${nameSplit[0]}`);\n        record.addComment(\"author\", \"Author name was updated for vendor\");\n        return record;\n      }\n    })\n  );\n\n  // Listen for our workbook:map event to be completed forwarding data\n  listener.filter({ job: \"workbook:map\" }, (configure) => {\n    configure.on(\"job:completed\", async (event: FlatfileEvent) => {\n\n      // Get our data as a CSV\n      const { data } = await api.workbooks.get(event.context.workbookId);\n      const orderSheet = data.sheets[1].id;\n      const csv = await api.sheets.getRecordsAsCsv(orderSheet);\n\n      // Custom egress code here\n    });\n  });\n```\n\n## Things you can do here\n\nIn a Headless use case, you a user would only use the UI if an automation needed some advice on how to proceed.\n\nThis Space has been configured to automatically automatically process and show where your custom code may egress, but you'll need to mimic ingress.\n\nYou can do that by importing [this inventory file](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/typescript/headless/inventory.xlsx).\n\nWatch all of the processing happen without further human intervention!\n\n## Further documentation\n\nRead more about configuring a completely automated data import experience [here](https://flatfile.com/docs/guides/use-cases/headless).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "localizationDocument": "# Tailor the language and text in your Flatfile Spaces\n\n---\n\nEnable translations, customizations, and text overrides for your Spaces easily with Flatfile's localization support.\n\n## Things you can do here\n\nTry Different Languages for Some Puppy Fun! ð\n\nWouldn't it be pawsome if puppies could speak every language? Well, here in our Puppy Localization Playground, you can experience just that!\n\nð Give it a try:\n\n- **English**: Just add `?lng=en` to the URL and reload the page for an experience suited to the English Pointer!\n- **German**: Append `?lng=de` to the end of the URL and hit enter for a woof-tastic German experience.\n- **French**: Use `?lng=fr` for a delightful French translation that even French poodles would approve of!\n- **Spanish**: Want to bark in Spanish? Just add `?lng=es` to the URL.\n\nWe're not teaching puppies to translate, but our magical translation.json file does the trick. The best part? Our Markdown page updates itself dynamically based on the selected language! No hardcoding needed. ðª\n\nSo, as you navigate through our Puppy Localization Playground, notice how the words transform into the language you choose. ð\n\nGo ahead, try it out! Explore the puppy world in different languages and see how localization makes the web a tail-waggingly good place for everyone! ð\n\nCheck out our [pupified translations here](https://github.com/FlatFilers/Platform-Translations/blob/kitchen-sink/locales/en/translation.json). You can also checkout the source code for this space in [Typescript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/typescript/localization/index.ts) and in [Javascript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/javascript/localization/index.js).\n\n## Making this Space\n\nThis Space has been configured with localization options.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          //Documents are using translation keys instead of hardcoding strings\n          const document = await api.documents.create(spaceId, {\n            title: \"myDocument.title\",\n            body: \"myDocument.body\",\n          });\n\n          //Setting the translation path for the space\n          await api.spaces.update(spaceId, {\n            metadata: {\n              sidebarConfig: {\n                defaultPage: {\n                  documentId: document.data.id,\n                },\n              },\n            },\n            translationsPath:\n              \"https://raw.githubusercontent.com/FlatFilers/Platform-Translations/kitchen-sink/locales/en/translation.json\",\n          });\n\n\n          await api.workbooks.create({\n            spaceId,\n            environmentId,\n            ...\n          });\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n          console.error(\"Error: \", error.stack);\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n```\n\n## Further documentation\n\nRead more about customizing your Space text [here](https://flatfile.com/docs/guides/localization).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "localizationDocumentFrench": "# Personnalisez la langue et le texte dans vos espaces Flatfile\n\n---\n\n## Ce que vous pouvez faire ici\n\nEssayez diffÃ©rentes langues pour vous amuser avec des chiotsÂ ! ð\n\nNe serait-ce pas gÃ©nial si les chiots pouvaient parler toutes les languesÂ ? Eh bien, ici, dans notre aire de jeux de localisation de chiots, vous pouvez vivre exactement celaÂ !\n\nð Essayez-leÂ :\n\n- **Anglais**Â : Ajoutez simplement `?lng=en` Ã  l'URL et rechargez la page pour une expÃ©rience adaptÃ©e au Pointer anglaisÂ !\n- **Allemand**Â : Ajoutez `?lng=de` Ã  la fin de l'URL et appuyez sur EntrÃ©e pour une expÃ©rience allemande qui fait ouafÂ !\n- **FranÃ§ais**Â : Utilisez `?lng=fr` pour une dÃ©licieuse traduction franÃ§aise que mÃªme les caniches franÃ§ais approuveraientÂ !\n- **Espagnol**Â : Envie d'aboyer en espagnolÂ ? Ajoutez simplement `?lng=es` Ã  l'URL.\n\nNous n'apprenons pas aux chiots Ã  traduire, mais notre fichier de traduction.json magique fait le travail. Le meilleurÂ ? Notre page Markdown se met Ã  jour dynamiquement en fonction de la langue sÃ©lectionnÃ©eÂ ! Pas besoin de coder en dur. ðª\n\nAlors, pendant que vous naviguez dans notre aire de jeux de localisation de chiots, remarquez comment les mots se transforment dans la langue que vous choisissez. ð\n\nAllez-y, essayez-leÂ ! Explorez le monde des chiots dans diffÃ©rentes langues et dÃ©couvrez comment la localisation rend le web encore plus accueillant pour tout le mondeÂ ! ð\n\nConsultez nos [traductions enrichies pour chiots ici](https://github.com/FlatFilers/Platform-Translations/blob/kitchen-sink/locales/en/translation.json). Vous pouvez Ã©galement consulter le code source de cet espace en [TypeScript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/typescript/localization/index.ts) et en [JavaScript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/javascript/localization/index.js).\n\nActivez les traductions, les personnalisations et les remplacements de texte pour vos espaces en toute simplicitÃ© grÃ¢ce au support de localisation de Flatfile.\n\n## CrÃ©ation de cet espace\n\nCet espace a Ã©tÃ© configurÃ© avec des options de localisation.\n\nVoici un aperÃ§u du code qui a Ã©tÃ© utilisÃ© pour le crÃ©erÂ :\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          //Documents are using translation keys instead of hardcoding strings\n          const document = await api.documents.create(spaceId, {\n            title: \"myDocument.title\",\n            body: \"myDocument.body\",\n          });\n\n          //Setting the translation path for the space\n          await api.spaces.update(spaceId, {\n            metadata: {\n              sidebarConfig: {\n                defaultPage: {\n                  documentId: document.data.id,\n                },\n              },\n            },\n            translationsPath:\n              \"https://raw.githubusercontent.com/FlatFilers/Platform-Translations/kitchen-sink/locales/en/translation.json\",\n          });\n\n\n          await api.workbooks.create({\n            spaceId,\n            environmentId,\n            ...\n          });\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n          console.error(\"Error: \", error.stack);\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n```\n\n## Documentation complÃ©mentaire\n\nEn savoir plus sur la personnalisation du texte de votre espace [ici](https://flatfile.com/docs/guides/localization).\n\nApprenez-en plus sur Flatfile en essayant nos [autres dÃ©mos](https://platform.flatfile.com/getting-started)\n",
  "localizationDocumentGerman": "# Passen Sie die Sprache und den Text in Ihren Flatfile Spaces an\n\n---\n\nAktivieren Sie Ãbersetzungen, Anpassungen und TextÃ¼berschreibungen fÃ¼r Ihre Spaces ganz einfach mit der LokalisierungsunterstÃ¼tzung von Flatfile.\n\n## Was Sie hier tun kÃ¶nnen\n\nProbieren Sie verschiedene Sprachen fÃ¼r SpaÃ mit sÃ¼Ãen Welpen aus! ð\n\nWÃ¤re es nicht groÃartig, wenn Welpen jede Sprache sprechen kÃ¶nnten? Nun, hier in unserem Welpen-Lokalisierungs-Spielplatz kÃ¶nnen Sie genau das erleben!\n\nð Probieren Sie es aus:\n\n- **Englisch**: FÃ¼gen Sie einfach `?lng=en` am Ende der URL hinzu und laden Sie die Seite neu, um eine Erfahrung fÃ¼r den Englischen Pointer zu erhalten!\n- **Deutsch**: HÃ¤ngen Sie `?lng=de` an das Ende der URL an und drÃ¼cken Sie Enter fÃ¼r eine hervorragende deutsche Erfahrung.\n- **FranzÃ¶sisch**: Verwenden Sie `?lng=fr` fÃ¼r eine charmante franzÃ¶sische Ãbersetzung, die selbst franzÃ¶sische Pudel gutheiÃen wÃ¼rden!\n- **Spanisch**: MÃ¶chten Sie auf Spanisch bellen? FÃ¼gen Sie einfach `?lng=es` zur URL hinzu.\n\nWir bringen den Welpen nicht bei, zu Ã¼bersetzen, aber unsere magische translation.json-Datei erledigt den Trick. Das Beste daran? Unsere Markdown-Seite aktualisiert sich dynamisch basierend auf der ausgewÃ¤hlten Sprache! Keine harte Programmierung erforderlich. ðª\n\nAlso, wÃ¤hrend Sie durch unseren Welpen-Lokalisierungs-Spielplatz navigieren, achten Sie darauf, wie sich die WÃ¶rter in die von Ihnen gewÃ¤hlte Sprache verwandeln. ð\n\nProbieren Sie es aus! Erkunden Sie die Welt der Welpen in verschiedenen Sprachen und sehen Sie, wie die Lokalisierung das Internet zu einem schwanzwedelnden Ort fÃ¼r alle macht! ð\n\nSchauen Sie sich unsere [verhunderten Ãbersetzungen hier an](https://github.com/FlatFilers/Platform-Translations/blob/kitchen-sink/locales/en/translation.json). Sie kÃ¶nnen auch den Quellcode fÃ¼r diesen Space in [TypeScript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/typescript/localization/index.ts) und in [JavaScript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/javascript/localization/index.js) Ã¼berprÃ¼fen.\n\n## Erstellung dieses Spaces\n\nDieser Space wurde mit Lokalisierungsoptionen konfiguriert.\n\nHier erhalten Sie einen Einblick in den Code, der verwendet wurde, um ihn zu erstellen:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          //Documents are using translation keys instead of hardcoding strings\n          const document = await api.documents.create(spaceId, {\n            title: \"myDocument.title\",\n            body: \"myDocument.body\",\n          });\n\n          //Setting the translation path for the space\n          await api.spaces.update(spaceId, {\n            metadata: {\n              sidebarConfig: {\n                defaultPage: {\n                  documentId: document.data.id,\n                },\n              },\n            },\n            translationsPath:\n              \"https://raw.githubusercontent.com/FlatFilers/Platform-Translations/kitchen-sink/locales/en/translation.json\",\n          });\n\n\n          await api.workbooks.create({\n            spaceId,\n            environmentId,\n            ...\n          });\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n          console.error(\"Error: \", error.stack);\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n```\n\n## Weitere Dokumentation\n\nErfahren Sie mehr darÃ¼ber, wie Sie den Text Ihres Spaces anpassen kÃ¶nnen [hier](https://flatfile.com/docs/guides/localization).\n\nErfahren Sie mehr Ã¼ber Flatfile, indem Sie unsere [anderen Demos ausprobieren](https://platform.flatfile.com/getting-started)\n",
  "localizationDocumentSpanish": "# Personaliza el lenguaje y el texto en tus Espacios de Flatfile\n\n---\n\nHabilita traducciones, personalizaciones y sustituciones de texto fÃ¡cilmente en tus Espacios con el soporte de localizaciÃ³n de Flatfile.\n\n## Cosas que puedes hacer aquÃ­\n\nÂ¡Prueba Diferentes Idiomas para DiversiÃ³n Cachorresca! ð\n\nÂ¿No serÃ­a genial si los cachorros pudieran hablar todos los idiomas? Bueno, aquÃ­, en nuestro Patio de Juegos de LocalizaciÃ³n de Cachorros, Â¡puedes experimentar justo eso!\n\nð IntÃ©ntalo:\n\n- **InglÃ©s**: Simplemente agrega `?lng=en` al final de la URL y recarga la pÃ¡gina para una experiencia adecuada al Pointer inglÃ©s.\n- **AlemÃ¡n**: Agrega `?lng=de` al final de la URL y presiona enter para una experiencia alemana increÃ­ble.\n- **FrancÃ©s**: Usa `?lng=fr` para una encantadora traducciÃ³n al francÃ©s que incluso los caniches franceses aprobarÃ­an.\n- **EspaÃ±ol**: Â¿Quieres ladrar en espaÃ±ol? Solo agrega `?lng=es` a la URL.\n\nNo estamos enseÃ±ando a los cachorros a traducir, pero nuestro archivo de traducciÃ³n.json mÃ¡gico hace el truco. Â¿Lo mejor? Â¡Nuestra pÃ¡gina de Markdown se actualiza dinÃ¡micamente segÃºn el idioma seleccionado! No se necesita programaciÃ³n complicada. ðª\n\nAsÃ­ que, mientras navegas por nuestro Patio de Juegos de LocalizaciÃ³n de Cachorros, nota cÃ³mo las palabras se transforman en el idioma que elijas. ð\n\nAdelante, Â¡pruÃ©balo! Â¡Explora el mundo de los cachorros en diferentes idiomas y ve cÃ³mo la localizaciÃ³n hace que la web sea un lugar donde todos pueden mover la cola con alegrÃ­a! ð\n\nEcha un vistazo a nuestras [traducciones perrunas aquÃ­](https://github.com/FlatFilers/Platform-Translations/blob/kitchen-sink/locales/en/translation.json). TambiÃ©n puedes ver el cÃ³digo fuente de este espacio en [TypeScript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/typescript/localization/index.ts) y en [JavaScript](https://github.com/FlatFilers/flatfile-docs-kitchen-sink/blob/main/javascript/localization/index.js).\n\n## Creando este Espacio\n\nEste Espacio ha sido configurado con opciones de localizaciÃ³n.\n\nAquÃ­ tienes un vistazo al cÃ³digo que se utilizÃ³ para crearlo:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          //Documents are using translation keys instead of hardcoding strings\n          const document = await api.documents.create(spaceId, {\n            title: \"myDocument.title\",\n            body: \"myDocument.body\",\n          });\n\n          //Setting the translation path for the space\n          await api.spaces.update(spaceId, {\n            metadata: {\n              sidebarConfig: {\n                defaultPage: {\n                  documentId: document.data.id,\n                },\n              },\n            },\n            translationsPath:\n              \"https://raw.githubusercontent.com/FlatFilers/Platform-Translations/kitchen-sink/locales/en/translation.json\",\n          });\n\n\n          await api.workbooks.create({\n            spaceId,\n            environmentId,\n            ...\n          });\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n          console.error(\"Error: \", error.stack);\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n```\n\n## DocumentaciÃ³n adicional\n\nLee mÃ¡s sobre cÃ³mo personalizar el texto de tu Espacio [aquÃ­](https://flatfile.com/docs/guides/localization).\n\nAprende mÃ¡s sobre Flatfile probando nuestras [otras demos](https://platform.flatfile.com/getting-started)\n",
  "metadataDocument": "# Store descriptive information or data that provides additional context\n\n---\n\nMetadata refers is data that provides information about other data. It offers context and details about a particular piece of data, helping to describe and organize it.\n\nMetadata can include various attributes such as the creation date, user, size, format, and more, depending on the context.\n\nIn essence, metadata helps in understanding and managing data. In Flatfile, you can store and retrieve additional data about an Environment, Space, Record, or Field without exposing it to end users.\n\n## Making this Space\n\nThis Space has been configured with Records that are decorated with metadata.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\nimport simpleWorkbook from \"../constants/workbook.json\";\nimport { metadataDocument } from \"../constants/documents.json\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          const { data } = await api.documents.create(spaceId, {\n            title: \"About this Metadata Demo\",\n            body: metadataDocument,\n          });\n\n          const documentId = data.id;\n          const spaceUpdateParams = {\n            metadata: {\n              sidebarConfig: {\n                defaultPage: {\n                  documentId,\n                },\n              },\n            },\n          };\n\n          await api.spaces.update(spaceId, spaceUpdateParams);\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n          console.error(\"Error: \", error.stack);\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n\n```\n\nYou can see that after creating this Space, this Document is created, and then a Space update call is made to make this Document the default page of this Space.\n\nLike this example, Flatfile uses some values in the Metadata object to support your configurations, but the Metadata object is flexible and open, enabling you to add further details contextualizing your Environments, Spaces, Workbooks, Sheets, and Records.\n\n## Further documentation\n\nRead more about contextualizing your data with descriptive information [here](https://flatfile.com/docs/guides/metadata).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "namespaceDocument": "# Create distinct experiences with namespaces\n\n---\n\nNamespaces provide the ability to limit the extent of influence over Spaces, Workbooks, and Sheets. In situations where you are want to differentiate between Flatfile experiences, you can configure your system to react solely when the event aligns with the designated namespaces.\n\nIn your Flatfile listener, when youâre monitoring for specific events, you can set your system to only respond if the event matches the assigned namespaces.\n\n## Making this Space\n\nThis very Space was configured using a Namespace.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport namespace from \"namespace-demo\";\nimport another from \"other-demo\";\n\nimport { Client } from \"@flatfile/listener\";\n\nexport default function (listener: Client) {\n  listener.namespace([\"space:namespace-demo\"], namespace);\n  listener.namespace([\"space:another-demo\"], another);\n}\n```\n\nNotice that there are two listener configurations here:\n\n- `space:namespace-demo`\n- `space:another-demo`\n\nThe `space:namespace-demo` was triggered on the creation of this demo, while another demo, under another namespace will create with a different configuration, both running on the same agent\n\n## Further documentation\n\nRead more about narrowing the scope of Spaces, Workbooks, and Sheets [here](LINK).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "secretsDocument": "# Securely store and use credentials\n\n---\n\nSecrets enable the secure sharing of credentials with listener implementations, all without requiring developers to have direct knowledge of the secret values in advance.\n\nThese values are established within the user interface but are accessed through the SDK or API.\n\n## Making this Space\n\nThis Space has been configured with a Secret.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          await api.secrets.upsert({\n            environmentId,\n            spaceId,\n            name: \"My First Secret\",\n            value: \"My Super Secret Value\",\n          });\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n\n```\n\n## Things you can do here\n\nGo to the Secrets tab of this space and check out the Secret that has been populated. This secret is then can then be accessed in your Listener configuration and used to interact with external resources requiring credentials.\n\n## Further documentation\n\nRead more about securely storing use credentials in your configuration [here](https://flatfile.com/docs/guides/secrets).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "sidebarDocument": "# Customize what your guests see in their sidebar\n\n---\n\nFlatfile allows you to update your Sidebar to hide or show certain elements.\n\nBy combining the customizable Sidebar functionality with the power to dynamically create and update Spaces, narrowing your scope with Namespaces, you can create different experiences for different sets of users.\n\n## Making this Space\n\nThis Space has been configured to hide the Sidebar on the left for any guests you invite to this Space.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent, FlatfileListener } from \"@flatfile/listener\";\nimport { sidebarDocument } from \"../constants/documents.json\";\nimport simpleWorkbook from \"../constants/workbook.json\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.filter({ job: \"space:configure\" }, (configure: FlatfileListener) => {\n    configure.on(\n      \"job:ready\",\n      async ({ context: { spaceId, environmentId, jobId } }: FlatfileEvent) => {\n        try {\n          await api.jobs.ack(jobId, {\n            info: \"Job started.\",\n            progress: 10,\n          });\n\n          const spaceUpdateParams = {\n            metadata: {\n              sidebarConfig: {\n                showSidebar: false,\n              },\n            },\n          };\n\n          await api.spaces.update(spaceId, spaceUpdateParams);\n\n          await api.jobs.complete(jobId, {\n            outcome: {\n              message: \"Job completed.\",\n            },\n          });\n        } catch (error: any) {\n          console.error(\"Error: \", error.stack);\n\n          await api.jobs.fail(jobId, {\n            outcome: {\n              message: \"Job error.\",\n            },\n          });\n        }\n      }\n    );\n  });\n}\n\n```\n\n## Things you can do here\n\nInvite guest (or yourself at an alias) and log into this Space as that user. The Sidebar will be hidden.\n\n## Further documentation\n\nRead more about configuring what your guests see in their sidebar [here](https://flatfile.com/docs/guides/guest_sidebar).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "simpleDocument": "# Welcome to Flatfile\n\n---\n\nThis is a Space. It's been configured with some basic options to help you get acquainted with the Flatfile Platform.\n\nLet's begin by getting familiar with what you're seeing here in the Sidebar.\n\n## Documents\n\nYou are reading a document called \"About this Demo\", it's been configured as the landing page of this Space and a shortcut to it is located at the top of your Sidebar.\n\n## Data Checklist\n\nBelow any documents is your \"Data checklist\". Use this section to explore what the data in your Workbook is expected to look like.\n\n## Files\n\nUse the \"Files\" tab to upload files. You can also upload them directly int Sheets. Your Workbooks and Sheets are located at below the divider in Sidebar.\n\n## Secrets\n\nConfiguring Secrets is an administrative function. Use this section to securely store key-value pairs that can be used in the code supporting your Flatfile Spaces.\n\n## Guests\n\nAs an administrator you may also invite collaborators to work with you in this Space in the \"Manage guests\" section. Their view will look a little different than yours. Try inviting yourself at an alias email to see the difference.\n\n## Data\n\nThe Workbook currently configured in this Space contains two Sheets: **Contacts**, and **Countries**.\n\n## Things you can do here\n\n1. You can upload/download CSV files into and from each Sheet.\n2. You can manually add records to each Sheet directly in the UI.\n3. You can also manually adjust cells & records individually, or in bulk.\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n",
  "themingDocument": "# Customize the look and feel of Flatfile to match your brand\n\n---\n\nAll Spaces are customizable via theming options enabling you to blend Flatfile seamlessly into your application.\n\n## Making this Space\n\nThis Space has been configured to leverage the visual overrides available to help you theme a Space.\\\nWe've customized the colors and logo in this Space to match a sample brand but you can very easily update all of the elements you see to a different aesthetic to match yours.\\\nEven better? Create co-branded experiences in all of your Spaces for every one of your customers.\n\nHere's a look at the code that was used to create it:\n\n```jsx\nimport api from \"@flatfile/api\";\nimport { Client, FlatfileEvent } from \"@flatfile/listener\";\n\nexport default function flatfileEventListener(listener: Client) {\n  listener.on(\n    \"space:created\",\n    async ({ context: { spaceId, environmentId } }: FlatfileEvent) => {\n      await api.spaces.update(spaceId, {\n        environmentId,\n        metadata: {\n          theme: {\n            root: {\n              primaryColor: \"#090B2B\",\n              dangerColor: \"#F44336\",\n              warningColor: \"#FF9800\",\n            },\n            document: {\n              borderColor: \"#CAD0DC\",\n            },\n            sidebar: {\n              logo: \"path/to/logo/file\",\n              textColor: \"#ECEEFF\",\n              titleColor: \"#C4C9FF\",\n              focusBgColor: \"#6673FF\",\n              focusTextColor: \"#FFF\",\n              backgroundColor: \"#090B2B\",\n              footerTextColor: \"#C4C9FF\",\n              textUltralightColor: \"#B9DDFF\",\n              borderColor: \"#2E3168\",\n              activeTextColor: \"#FFF\",\n            },\n            table: {},\n          },\n          sidebarConfig: {\n            showGuestInvite: true,\n            showDataChecklist: true,\n            showSidebar: true,\n          },\n        },\n      });\n    }\n  );\n}\n```\n\n## Things you can do here\n\nSet the sidebar theme straight from the configurations worksheet! Simply select a theme, then select \"More Actions\", \"Update Theme\".\\\nThe listener configured behind this space will get information about your selection and make a call to update your sidebar theme.\n\n## Further documentation\n\nRead more about how to customize the look and feel of Flatfile to match your brand [here](https://flatfile.com/docs/guides/theming).\n\n## Learn more about Flatfile by trying our [other demos](https://platform.flatfile.com/getting-started)\n"
}